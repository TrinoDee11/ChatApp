
<%- include('../partials/header') %>
<section class="d-flex vh-100">
  <!-- Sidebar -->
  <aside class="d-flex flex-column border-end bg-white" style="width: 280px;">
    <div class="p-3 border-bottom bg-light">
      <h2 class="h5 mb-0 fw-semibold">Contacts</h2>
    </div>
    <ul id="userList" class="list-unstyled flex-grow-1 overflow-auto m-0 p-0">
      <% others.forEach(u => { %>
        <li class="px-3 py-2 <%= selected === u.id ? 'active bg-light' : '' %>">
          <a href="/chat?to=<%= u.id %>" class="d-block text-decoration-none text-dark">
            <%= u.name %>
          </a>
        </li>
      <% }) %>
    </ul>
    <% if (!others.length) { %>
      <div class="p-3 text-center">
        <p class="text-muted small mb-0">No other users yet. Sign up another account in a different browser to start chatting.</p>
      </div>
    <% } %>
  </aside>

  <!-- Chat Window -->
  <section class="flex-grow-1 d-flex flex-column <%= !selected ? 'align-items-center justify-content-center bg-light' : '' %>">
    <% if (selected) { %>
      <% const selectedUser = others.find(o => o.id === selected); %>
      <div class="p-3 border-bottom bg-white">
        <h2 class="h5 mb-0 fw-semibold"><%= selectedUser ? selectedUser.name : 'Conversation' %></h2>
      </div>
      
      <div id="messages" class="flex-grow-1 p-3 overflow-auto bg-light"></div>
      
      <form id="sendForm" class="p-3 bg-white border-top">
        <div class="input-group">
          <input id="messageInput" type="text" class="form-control rounded-start" 
                 placeholder="Type a message..." autocomplete="off">
          <button class="btn btn-primary rounded-end" type="submit">Send</button>
        </div>
      </form>
    <% } else { %>
      <div class="text-center p-4">
        <h2 class="h4 mb-3 fw-semibold">Welcome!</h2>
        <p class="text-muted">Select a contact to start chatting.</p>
      </div>
    <% } %>
  </section>
</section>

<style>
  /* Custom styles to match the original message bubbles */
  .msg {
    margin-bottom: 1rem;
  }
  
  .msg.me {
    text-align: right;
  }
  
  .msg.them {
    text-align: left;
  }
  
  .bubble {
    display: inline-block;
    max-width: 70%;
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    position: relative;
  }
  
  .msg.me .bubble {
    background-color: #34C759;
    color: white;
  }
  
  .msg.them .bubble {
    background-color: white;
    border: 1px solid #dee2e6;
  }
  
  .time {
    font-size: 0.75rem;
    color: #6c757d;
    margin-top: 0.25rem;
  }
  
  .msg.me .time {
    color: rgba(255,255,255,0.7);
  }
  
  #userList li.active {
    border-left: 3px solid #34C759;
  }
  
  #userList li:hover {
    background-color: #f8f9fa !important;
  }
</style>

<script>
// Original JavaScript remains completely unchanged
(function(){
  const selected = "<%= selected || '' %>";
  if (!selected) return;

  const messagesEl = document.getElementById('messages');
  const inputEl = document.getElementById('messageInput');
  const formEl = document.getElementById('sendForm');

  function el(tag, attrs={}, text='') {
    const e = document.createElement(tag);
    for (const [k,v] of Object.entries(attrs)) e.setAttribute(k,v);
    if (text) e.textContent = text;
    return e;
  }

  function formatTime(iso) {
    const d = new Date(iso);
    return d.toLocaleString();
  }

  async function loadMessages(scroll=true) {
    const res = await fetch(`/api/messages/${selected}`);
    const data = await res.json();
    messagesEl.innerHTML = '';
    data.forEach(m => {
      const wrap = el('div', { class: `msg ${m.from === "<%= currentUser.id %>" ? "me" : "them"}` });
      const bubble = el('div', { class: 'bubble' });
      bubble.appendChild(el('div', { class: 'text' }, m.text));
      bubble.appendChild(el('div', { class: 'time' }, formatTime(m.timestamp)));
      wrap.appendChild(bubble);
      messagesEl.appendChild(wrap);
    });
    if (scroll) messagesEl.scrollTop = messagesEl.scrollHeight;
  }

  async function sendMessage(text) {
    const res = await fetch(`/api/messages/${selected}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text })
    });
    if (!res.ok) {
      const e = await res.json().catch(()=>({error:'Failed'}));
      alert(e.error || 'Failed to send');
      return;
    }
    await loadMessages(true);
  }

  formEl.addEventListener('submit', async (e) => {
    e.preventDefault();
    const text = inputEl.value.trim();
    if (!text) return;
    inputEl.value = '';
    await sendMessage(text);
  });

  // Poll for new messages every 2 seconds
  loadMessages(true);
  setInterval(loadMessages, 2000, false);
})();
</script>

<%- include('../partials/footer') %>
